



                                Records


 -> Records are special type of class that help avoid boilerplate code. They are considerated
 "data carriers"

 -> Records are immutable and are final by default

 -> You cannot extend your custom record because records already (implicitly) extend from
 the Record class. This is similar to enums (which implicitly extend the Enum).

 -> Records can have both static fields and static methods.

 -> Records can have instance methods.

 -> Records cannot have instance fields. All the instance fields are listed as "components"
 in the record declaration.

 -> Records can implement interfaces

 -> Records are specified using a record declaration where you specify the "components" of the record.
 Example:
    public record CarRecord(String regNumber,String owner) {}

    Implicitly generated are:
        - canonical constructor
        - toString()
        -equals() and hashCode()
        -public accessor methods with the same name as the components.


 Example: Default canonical constructor
    public CarRecord(String regNumber,String owner)  {
        this.regNumber=regNumber;
        this.owner=owner;
    }

 Example: Custom canonical constructor
    public CarRecord(String regNumber,String owner) {
        if (regNumber.length() <= 4) {
            throw new IllegalArgumentException();
        }
        this.regNumber = regNumber;
        this.owner = owner;

    }



